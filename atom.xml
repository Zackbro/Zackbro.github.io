<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zack’s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pyramidk.github.io/"/>
  <updated>2017-02-18T07:27:04.468Z</updated>
  <id>https://pyramidk.github.io/</id>
  
  <author>
    <name>Zack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS数据结构和算法笔记（5）</title>
    <link href="https://pyramidk.github.io/2017/01/20/learing-datastrc3/"/>
    <id>https://pyramidk.github.io/2017/01/20/learing-datastrc3/</id>
    <published>2017-01-20T10:41:42.000Z</published>
    <updated>2017-02-18T07:27:04.468Z</updated>
    
    <content type="html"><![CDATA[<p>1.散列后的数据可以快速的插入或取用，散列使用的数据结构叫做散列表。</p>
<p>2.使用散列表存储数据时，通过一个散列函数将键映射为一个数组，这个数字的范围是0到散列表的长度。</p>
<p>3.用散列函数时，存在将2个键映射成同一个值的可能，这种现象称为碰撞。</p>
<a id="more"></a>
<p>4.保留余数法。</p>
<p>5.集合是一种包含不同元素的数据结构。2个特性： 无序，不同。</p>
<p>6.树是一种非线性数据结构，以分层的方式存储数据。</p>
<p>7.树最上面的节点称为根节点。</p>
<p>8.父节点： 节点下面连接多个节点。这些下面的节点称为子节点。</p>
<p>9.没有任何子节点的节点称为叶子节点。</p>
<p>10.二叉树是一种特殊的树，它的字节点树不超过2个。</p>
<p>11.从一个节点到另一个节点的这一组边称为路径，以某种特定的顺序访问树中所有的节点称为树的遍历。</p>
<p>12.每个节点都有一个与之相关的值，该值为键。</p>
<p>13.二叉查找树是一种特殊的二叉树，相对较小的值保存在左节点，较大右节点。</p>
<p>14.中序遍历按照节点上的键值，以升序访问BST上的所有节点。</p>
<p>15.先序遍历先访问根节点，然后以同样方式访问左子树和右子树。</p>
<p>16.后序遍历先访问叶子节点，从左子树到右子树，再到根节点。</p>
<p>17.图由边的集合及顶点的结合组成。</p>
<p>18.边由顶点对定义（v1,v2）,v1和v2分别是图中的2个顶点。</p>
<p>19 顶点也有权重，也称为成本。如果一个图的顶点是有序的，则可称为向图。如果图是无序的，则称之为无序图，或无向图。</p>
<p>20.交换的原则就是将其中一个元素用一个变量存储起来，让这个元素等于另一元素，最后将另一元素等于当前变量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.散列后的数据可以快速的插入或取用，散列使用的数据结构叫做散列表。&lt;/p&gt;
&lt;p&gt;2.使用散列表存储数据时，通过一个散列函数将键映射为一个数组，这个数字的范围是0到散列表的长度。&lt;/p&gt;
&lt;p&gt;3.用散列函数时，存在将2个键映射成同一个值的可能，这种现象称为碰撞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构笔记" scheme="https://pyramidk.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vim安装与配置（Windows）</title>
    <link href="https://pyramidk.github.io/2017/01/19/vim/"/>
    <id>https://pyramidk.github.io/2017/01/19/vim/</id>
    <published>2017-01-19T09:20:39.571Z</published>
    <updated>2017-02-18T06:11:40.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vim安装"><a href="#Vim安装" class="headerlink" title="Vim安装"></a>Vim安装</h3><ol>
<li>去官网下载vim，最好下载安装文件而不是压缩包。</li>
<li>在window下安装在program files(86)文件下运行git命令行会报错，而且需要权限。可以尝试安装在其他地方。</li>
<li>正确安装之后可以在vim文件夹下看到配置文件_vimrc。</li>
</ol>
<a id="more"></a>
<h3 id="安装vim插件管理vundle"><a href="#安装vim插件管理vundle" class="headerlink" title="安装vim插件管理vundle"></a>安装vim插件管理vundle</h3><p>注意：在windows下需要先安装git和配置curl，因为需要curl在命令行中运行，所以需要curl.cmd，github介绍文件如是说。</p>
<blockquote>
<p>Vundle for Windows: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">官网介绍</a></p>
</blockquote>
<ol>
<li>下载msysgit，一路安装，在环境配置的地方，选择第二个“run git from the windows command prompt”。</li>
<li>cmd输入git –versions查看是否成功。</li>
<li>配置curl：在安装的Git/cmd/新建curl.cmd,里面添加如下内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@rem Do not use <span class="string">"echo off"</span> to not affect any child calls.</div><div class="line">@setlocal</div><div class="line"> </div><div class="line">@rem Get the abolute path to the parent directory, <span class="built_in">which</span> is assumed to be the</div><div class="line">@rem Git installation root.</div><div class="line">@<span class="keyword">for</span> /F <span class="string">"delims="</span> %%I <span class="keyword">in</span> (<span class="string">"%~dp0.."</span>) <span class="keyword">do</span> @<span class="built_in">set</span> git_install_root=%%~fI</div><div class="line">@<span class="built_in">set</span> PATH=%git_install_root%\bin;%git_install_root%\mingw\bin;%git_install_root%\mingw64\bin;%PATH%</div><div class="line">@rem !!!!!!! For 64bit msysgit, replace <span class="string">'mingw'</span> above with <span class="string">'mingw64'</span> !!!!!!!</div><div class="line"> </div><div class="line">@<span class="keyword">if</span> not exist <span class="string">"%HOME%"</span> @<span class="built_in">set</span> HOME=%HOMEDRIVE%%HOMEPATH%</div><div class="line">@<span class="keyword">if</span> not exist <span class="string">"%HOME%"</span> @<span class="built_in">set</span> HOME=%USERPROFILE%</div><div class="line"> </div><div class="line">@curl.exe %*</div></pre></td></tr></table></figure>
<ol>
<li>cmd运行curl –version查看是否成功  </li>
<li>安装Vundle：git clone <a href="https://github.com/gmarik/Vundle.vim.git" target="_blank" rel="external">https://github.com/gmarik/Vundle.vim.git</a> C:\Program Files (x86)\Vim\vimfiles\bundle\Vundle.vim； 某些教程上让直接git clone，但在默认的vim安装文件夹下会报错，解决方法是安装vim在其他文件里；或者git clone在其他文件夹下，然后复制到vim相应的文件夹下。  </li>
<li>最后配置_vimrc文件就行，然后通过在Gvim里是使用：BundleInstall命令，可以运行即为成功。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vim安装&quot;&gt;&lt;a href=&quot;#Vim安装&quot; class=&quot;headerlink&quot; title=&quot;Vim安装&quot;&gt;&lt;/a&gt;Vim安装&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;去官网下载vim，最好下载安装文件而不是压缩包。&lt;/li&gt;
&lt;li&gt;在window下安装在program files(86)文件下运行git命令行会报错，而且需要权限。可以尝试安装在其他地方。&lt;/li&gt;
&lt;li&gt;正确安装之后可以在vim文件夹下看到配置文件_vimrc。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS数据结构和算法笔记（4）</title>
    <link href="https://pyramidk.github.io/2017/01/16/Algorithm2/"/>
    <id>https://pyramidk.github.io/2017/01/16/Algorithm2/</id>
    <published>2017-01-16T11:53:38.525Z</published>
    <updated>2017-02-18T07:19:33.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高级排序算法"><a href="#高级排序算法" class="headerlink" title="高级排序算法"></a>高级排序算法</h2><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>在插入排序的基础上做了很大的改善。</p>
<p>它会首先比较距离较远的元素，使用这种方案可以使离正确位置很远的元素更快的回到合适的位置上。</p>
<p>希尔排序的工作原理是，通过定义一个间隔序列表示在排序过程中进行比较的元素之间有多远的间隔。</p>
<a id="more"></a>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>把一系列排好序的子序列合并成一个大的完整序列。</p>
<p>我们需要2个排好序的子数组，先从最小的数据开始插入，最后合并得到第三个数组。</p>
<p>自底向上的归并排序：首先将数据及分解为一组只有一个元素的数组，然后通过创建一组左右子数组将它们慢慢合并起来，每次合并都保存一部分排好序的数据，直到最后都排好序。</p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>首先在列表中选择一个元素作为基准值。</p>
<p>数据排序围绕基准值进行，将列表中小于基准值的元素移动到数组的底部，将大于基准值的元素移动到数组的顶部。</p>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高级排序算法&quot;&gt;&lt;a href=&quot;#高级排序算法&quot; class=&quot;headerlink&quot; title=&quot;高级排序算法&quot;&gt;&lt;/a&gt;高级排序算法&lt;/h2&gt;&lt;h4 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h4&gt;&lt;p&gt;在插入排序的基础上做了很大的改善。&lt;/p&gt;
&lt;p&gt;它会首先比较距离较远的元素，使用这种方案可以使离正确位置很远的元素更快的回到合适的位置上。&lt;/p&gt;
&lt;p&gt;希尔排序的工作原理是，通过定义一个间隔序列表示在排序过程中进行比较的元素之间有多远的间隔。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS数据结构和算法笔记（3）</title>
    <link href="https://pyramidk.github.io/2017/01/15/Algorithm/"/>
    <id>https://pyramidk.github.io/2017/01/15/Algorithm/</id>
    <published>2017-01-15T08:38:13.023Z</published>
    <updated>2017-02-18T07:19:24.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="基本排序算法"><a href="#基本排序算法" class="headerlink" title="基本排序算法"></a>基本排序算法</h3><h6 id="其核心思想是指对一组数据按照一定顺序重新排列。"><a href="#其核心思想是指对一组数据按照一定顺序重新排列。" class="headerlink" title="其核心思想是指对一组数据按照一定顺序重新排列。"></a>其核心思想是指对一组数据按照一定顺序重新排列。</h6><h6 id="重新排列时用到的技术是一组嵌套的for循环。"><a href="#重新排列时用到的技术是一组嵌套的for循环。" class="headerlink" title="重新排列时用到的技术是一组嵌套的for循环。"></a>重新排列时用到的技术是一组嵌套的for循环。</h6><h6 id="其中外循环用于遍历数组的每一项，内循环则用于比较元素。"><a href="#其中外循环用于遍历数组的每一项，内循环则用于比较元素。" class="headerlink" title="其中外循环用于遍历数组的每一项，内循环则用于比较元素。"></a>其中外循环用于遍历数组的每一项，内循环则用于比较元素。</h6><a id="more"></a>
<h3 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h3><h6 id="它是最慢的排序算法之一，也是最容易实现的排序算法。"><a href="#它是最慢的排序算法之一，也是最容易实现的排序算法。" class="headerlink" title="它是最慢的排序算法之一，也是最容易实现的排序算法。"></a>它是最慢的排序算法之一，也是最容易实现的排序算法。</h6><h6 id="此算法会多次在数组中移动，比较相邻的数据，当左侧大于右侧时进行互换。"><a href="#此算法会多次在数组中移动，比较相邻的数据，当左侧大于右侧时进行互换。" class="headerlink" title="此算法会多次在数组中移动，比较相邻的数据，当左侧大于右侧时进行互换。"></a>此算法会多次在数组中移动，比较相邻的数据，当左侧大于右侧时进行互换。</h6><h3 id="选择排序算法"><a href="#选择排序算法" class="headerlink" title="选择排序算法"></a>选择排序算法</h3><h6 id="选择排序从数组的开头开始，将第一个元素和其它元素进行比较，检查完所有的元素后，最小的元素会被放在数组的第一个位置，然后算法从第二个位置继续。"><a href="#选择排序从数组的开头开始，将第一个元素和其它元素进行比较，检查完所有的元素后，最小的元素会被放在数组的第一个位置，然后算法从第二个位置继续。" class="headerlink" title="选择排序从数组的开头开始，将第一个元素和其它元素进行比较，检查完所有的元素后，最小的元素会被放在数组的第一个位置，然后算法从第二个位置继续。"></a>选择排序从数组的开头开始，将第一个元素和其它元素进行比较，检查完所有的元素后，最小的元素会被放在数组的第一个位置，然后算法从第二个位置继续。</h6><h6 id="当进行到数组倒数第二个位置时，所有的数据便完成了排序。"><a href="#当进行到数组倒数第二个位置时，所有的数据便完成了排序。" class="headerlink" title="当进行到数组倒数第二个位置时，所有的数据便完成了排序。"></a>当进行到数组倒数第二个位置时，所有的数据便完成了排序。</h6><h6 id="选择排序会用到嵌套循环，外循环从数组的第一个元素移动到倒数第二个元素；内循环从第二个数组元素移动到最后一个元素，查找比当前外循环所指向的元素小的元素，每次内循环迭代后，数组中最小的值都会被赋值到合适的位置。"><a href="#选择排序会用到嵌套循环，外循环从数组的第一个元素移动到倒数第二个元素；内循环从第二个数组元素移动到最后一个元素，查找比当前外循环所指向的元素小的元素，每次内循环迭代后，数组中最小的值都会被赋值到合适的位置。" class="headerlink" title="选择排序会用到嵌套循环，外循环从数组的第一个元素移动到倒数第二个元素；内循环从第二个数组元素移动到最后一个元素，查找比当前外循环所指向的元素小的元素，每次内循环迭代后，数组中最小的值都会被赋值到合适的位置。"></a>选择排序会用到嵌套循环，外循环从数组的第一个元素移动到倒数第二个元素；内循环从第二个数组元素移动到最后一个元素，查找比当前外循环所指向的元素小的元素，每次内循环迭代后，数组中最小的值都会被赋值到合适的位置。</h6><h3 id="插入排序算法"><a href="#插入排序算法" class="headerlink" title="插入排序算法"></a>插入排序算法</h3><h6 id="插入排序类似于人类按数字或字母排序，选择选中的元素将它插入到合适的位置。"><a href="#插入排序类似于人类按数字或字母排序，选择选中的元素将它插入到合适的位置。" class="headerlink" title="插入排序类似于人类按数字或字母排序，选择选中的元素将它插入到合适的位置。"></a>插入排序类似于人类按数字或字母排序，选择选中的元素将它插入到合适的位置。</h6><h6 id="插入排序有2个循环。外循环将数组元素挨个移动，而内循环则对外循环选中的元素及它后面的那个元素进行比较，如果外循环中选中的元素比内循环选中的元素小，那么数组元素会向右移动，为内循环的这个元素腾出位置。"><a href="#插入排序有2个循环。外循环将数组元素挨个移动，而内循环则对外循环选中的元素及它后面的那个元素进行比较，如果外循环中选中的元素比内循环选中的元素小，那么数组元素会向右移动，为内循环的这个元素腾出位置。" class="headerlink" title="插入排序有2个循环。外循环将数组元素挨个移动，而内循环则对外循环选中的元素及它后面的那个元素进行比较，如果外循环中选中的元素比内循环选中的元素小，那么数组元素会向右移动，为内循环的这个元素腾出位置。"></a>插入排序有2个循环。外循环将数组元素挨个移动，而内循环则对外循环选中的元素及它后面的那个元素进行比较，如果外循环中选中的元素比内循环选中的元素小，那么数组元素会向右移动，为内循环的这个元素腾出位置。</h6>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;h3 id=&quot;基本排序算法&quot;&gt;&lt;a href=&quot;#基本排序算法&quot; class=&quot;headerlink&quot; title=&quot;基本排序算法&quot;&gt;&lt;/a&gt;基本排序算法&lt;/h3&gt;&lt;h6 id=&quot;其核心思想是指对一组数据按照一定顺序重新排列。&quot;&gt;&lt;a href=&quot;#其核心思想是指对一组数据按照一定顺序重新排列。&quot; class=&quot;headerlink&quot; title=&quot;其核心思想是指对一组数据按照一定顺序重新排列。&quot;&gt;&lt;/a&gt;其核心思想是指对一组数据按照一定顺序重新排列。&lt;/h6&gt;&lt;h6 id=&quot;重新排列时用到的技术是一组嵌套的for循环。&quot;&gt;&lt;a href=&quot;#重新排列时用到的技术是一组嵌套的for循环。&quot; class=&quot;headerlink&quot; title=&quot;重新排列时用到的技术是一组嵌套的for循环。&quot;&gt;&lt;/a&gt;重新排列时用到的技术是一组嵌套的for循环。&lt;/h6&gt;&lt;h6 id=&quot;其中外循环用于遍历数组的每一项，内循环则用于比较元素。&quot;&gt;&lt;a href=&quot;#其中外循环用于遍历数组的每一项，内循环则用于比较元素。&quot; class=&quot;headerlink&quot; title=&quot;其中外循环用于遍历数组的每一项，内循环则用于比较元素。&quot;&gt;&lt;/a&gt;其中外循环用于遍历数组的每一项，内循环则用于比较元素。&lt;/h6&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS数据结构和算法笔记（2）</title>
    <link href="https://pyramidk.github.io/2017/01/06/learing-datastrc2/"/>
    <id>https://pyramidk.github.io/2017/01/06/learing-datastrc2/</id>
    <published>2017-01-06T10:48:48.000Z</published>
    <updated>2017-02-18T07:20:29.166Z</updated>
    
    <content type="html"><![CDATA[<p>1.散列后的数据可以快速的插入或取用，散列使用的数据结构叫做散列表</p>
<p>2.使用散列表存储数据时，通过一个散列函数将键映射为一个数组，这个数字的范围是0到散列表的长度。<br>3.用散列函数时，存在将2个键映射成同一个值的可能，这种现象称为碰撞。</p>
<a id="more"></a>
<p>4.保留余数法。</p>
<p>5.集合是一种包含不同元素的数据结构。2个特性： 无序，不同。</p>
<p>6.树是一种非线性数据结构，以分层的方式存储数据。</p>
<p>7.树最上面的节点称为根节点。</p>
<p>8.父节点： 节点下面连接多个节点。这些下面的节点称为子节点。</p>
<p>9.没有任何子节点的节点称为叶子节点。</p>
<p>10.二叉树是一种特殊的树，它的字节点树不超过2个。</p>
<p>11.从一个节点到另一个节点的这一组边称为路径，以某种特定的顺序访问树中所有的节点称为树的遍历。</p>
<p>12.每个节点都有一个与之相关的值，该值为键。</p>
<p>13.二叉查找树是一种特殊的二叉树，相对较小的值保存在左节点，较大右节点。</p>
<p>14.中序遍历按照节点上的键值，以升序访问BST上的所有节点。</p>
<p>15.先序遍历先访问根节点，然后以同样方式访问左子树和右子树。</p>
<p>16.后序遍历先访问叶子节点，从左子树到右子树，再到根节点。</p>
<p>17.图由边的集合及顶点的结合组成。</p>
<p>18.边由顶点对定义（v1,v2）,v1和v2分别是图中的2个顶点。</p>
<p>19.顶点也有权重，也称为成本。如果一个图的顶点是有序的，则可称为向图。如果图是无序的，则称之为无序图，或无向图。</p>
<p>20.交换的原则就是将其中一个元素用一个变量存储起来，让这个元素等于另一元素，最后将另一元素等于当前变量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.散列后的数据可以快速的插入或取用，散列使用的数据结构叫做散列表&lt;/p&gt;
&lt;p&gt;2.使用散列表存储数据时，通过一个散列函数将键映射为一个数组，这个数字的范围是0到散列表的长度。&lt;br&gt;3.用散列函数时，存在将2个键映射成同一个值的可能，这种现象称为碰撞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构笔记" scheme="https://pyramidk.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS数据结构和算法笔记</title>
    <link href="https://pyramidk.github.io/2017/01/05/learing-datastrc/"/>
    <id>https://pyramidk.github.io/2017/01/05/learing-datastrc/</id>
    <published>2017-01-05T10:29:48.000Z</published>
    <updated>2017-02-18T07:19:48.574Z</updated>
    
    <content type="html"><![CDATA[<p>1.while循环： 在条件为真时执行   for循环：按执行次数执行一组语句 </p>
<p>2.任何可以被递归定义的函数，都可以被改写为迭代式程序</p>
<p>3.Array.isArray()来判断一个对象是否为数组</p>
<a id="more"></a>
<p>4.浅复制：对一个数组进行复制，新的数组只是增加了一个对老数组的引用，修改老数组的值，新的也会变化。还有深复制。（p16）<br>5.查找元素</p>
<p>6.index（）  存在返回索引，否则返回-1</p>
<p>7.将数组转化为字符串： join（）和toString（）</p>
<p>8.由已有数组创建新数组：concat（）和splice（起始索引，长度）也可用于增加和删除</p>
<p>9.数组添加：push，unshift 删除：pop， shift</p>
<p>10.从数组中间位置添加元素：splice（位置，0，要添加的元素）</p>
<p>11.排序：reverse，sort</p>
<p>12.不生成新数组的迭代器方法：forEach（）；every（）全为true，返回true；some（）一为true，返回true；reduce（）</p>
<p>13.生成新数组的迭代器方法：map（）；filter（）用于过滤一些东西</p>
<p>14.列表是一组有序的数据，每个列表中的数据称为元素。</p>
<p>15.栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。栈被称为一种后入先出的数据结构。</p>
<p>16.适用栈来解决掉问题：数制间的相互转换；回文；模拟递归</p>
<p>17.队列是一种先进先出的数据结构，在队尾插入元素，在队首删除元素。</p>
<p>18.链表是由一组节点组成的集合，每个节点都使用一个对象的引用指向它的后继，指向另一个节点的引用叫做链。</p>
<p>19.数组元素靠它们的位置进行引用，链表元素是靠相互之间的关系进行引用。</p>
<p>20.双向链表，循环列表</p>
<p>21.字典：以键值对存储数据的数据结构</p>
<p>22.Object 类的 keys() 方法可以返回传入参数中存储的所有键。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.while循环： 在条件为真时执行   for循环：按执行次数执行一组语句 &lt;/p&gt;
&lt;p&gt;2.任何可以被递归定义的函数，都可以被改写为迭代式程序&lt;/p&gt;
&lt;p&gt;3.Array.isArray()来判断一个对象是否为数组&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构笔记" scheme="https://pyramidk.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Some notes</title>
    <link href="https://pyramidk.github.io/2016/12/26/12.26/"/>
    <id>https://pyramidk.github.io/2016/12/26/12.26/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2017-02-24T10:55:19.018Z</updated>
    
    <content type="html"><![CDATA[<p>1.自定义键盘指令</p>
<p>2.过滤器的变化，去掉了默认过滤器，需自定义过滤器（传参有变化）</p>
<p>3.动画 2.0   traansition 变为组件  </p>
<p>4.router变化  loader  </p>
<p>5.组件通信变化，去掉了双向绑定 </p>
<p>6.按需加载相应组件bable-plugin-component </p>
<p>7.自定义组件加事件需要加native，@click。native=’get’  </p>
<p>8.bind的用法</p>
<p>9.icomoon 生成图标字体 </p>
<p>10.crosswork安卓端  cordova  iOS </p>
<p>11.移动端分辨率，像素  </p>
<p>12.1像素边框，利用伪类实现一像素，然后通过class实现缩放不改变的效果 </p>
<p>13.card-content-inner 去掉padding  fotter 去掉flex</p>
<p>14.设备像素比，张鑫续  </p>
<p>15.去除文字和图片之间的字体自带的默认间隔，将父元素的font-size设为0  </p>
<p>16.span标签需要内容撑开。即使设置了宽高也没用。可以变为inline-block来占位</p>
<p>17.css， 影响宽高的写在前面，影响样式的在后  </p>
<p>18.sticky footers w3cplus  </p>
<p>19.对于数字的处理：例如：4.3这个数字，我们需要4和后面小数的进行判断  可尝试如下方法获取整数：Math.floor(4.3 *2)/2, 判断是否有小数</p>
<p>20.display: table  用于垂直居中，多行也可以</p>
<p>21.vue: ref给dom做一个标记（名字）  $refs.名字就可以获得那个Dom    要注意nextick；dom的变化是在nexttick后渲染好的</p>
<p>22.圆形用border-radius=50% 实现；图标字体可用text-align: center来居中</p>
<p>23.vue dom更新是异步的，所以需要着重注意在￥nexttick 之后再触发一些事件</p>
<p>24.:href=”‘/gamedetail/‘+ item.id” vue绑定传参里的用法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.自定义键盘指令&lt;/p&gt;
&lt;p&gt;2.过滤器的变化，去掉了默认过滤器，需自定义过滤器（传参有变化）&lt;/p&gt;
&lt;p&gt;3.动画 2.0   traansition 变为组件  &lt;/p&gt;
&lt;p&gt;4.router变化  loader  &lt;/p&gt;
&lt;p&gt;5.组件通信变化，去掉了双向绑
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript语言精粹</title>
    <link href="https://pyramidk.github.io/2016/12/06/JSEssential/"/>
    <id>https://pyramidk.github.io/2016/12/06/JSEssential/</id>
    <published>2016-12-06T10:48:48.000Z</published>
    <updated>2017-02-18T06:52:56.509Z</updated>
    
    <content type="html"><![CDATA[<p>1.apply： 构建一个参数数组并让我们去调用函数，它允许我们选择this的值。可接收2个参数，第一个是绑定this的那个对象，第二个是参数。</p>
<p>2.函数里的参数数组，即arguments数组。缺点：它不是一个真正的数组，虽然拥有length属性，但缺少数组方法。</p>
<p>3.在函数前面加上new前缀来调用（即声明一个对象），且返回值不是一个对象，则返回this（该新对象）。</p>
<a id="more"></a>
<p>4.js移除字符串末端空白的方法：</p>
<p><img src="images/MyImg/JSEssential.png" class=""></p>
<p>5.闭包？？？page52  访问的是实际变量而不是复制？</p>
<p>6.for循环，那个事件处理器函数绑定了变量i，而不是函数在构造时变量i的值。修改前：</p>
<p><img src="images/MyImg/JSEssential2.png" class=""></p>
<p>  修改后：</p>
<p><img src="images/MyImg/JSEssential3.png" class=""></p>
<p>  定义了一个函数并立即传递i进去执行，而不是把一个函数赋值给onclick.那个函数将返回一个事件处理器函数，这个事件处理器函数绑定的是传递进去i 的值，而不是定义在add函数里i的值。 那个被返回的函数被赋值给onclick</p>
<p>7.array.concat(). concat返回一个新数组，是对array的浅复制，并将一个或多个参数添加在后面。</p>
<p>8.array.join（separator）,把一个array构造成一个字符串。</p>
<p>9.pop， push</p>
<p>10.shift， unshift</p>
<p>11.array.slice(start，end)， ，是对array的浅复制，从start开始到end，但不包括end。</p>
<p>12.array.sort（function（a，b）{return a -b}）；</p>
<p>13.array.splice（start，deletecount，item）移除元素</p>
<p>14.string.indexOf  ，查找字符串，返回位置否则返回-1</p>
<p>15.string.macth()，匹配一个字符串或正则，返回匹配的值</p>
<p>16.string.replace(searchvalue, replacevalue),返回一个新字符串。</p>
<p>17.string.slice（start, edn）,复制string一部分构造新字符串。</p>
<p>18.string.split（separator，limit）将string分割成片段来创建一个字符串数组。</p>
<p>19.parsrInt,将字符串转换为整数，在遇到非数字时停止解析</p>
<p>20.检测数组的方法：</p>
<p><img src="images/MyImg/JSEssential4.png" class=""></p>
<p> 或者（这个更好）</p>
<p><img src="images/MyImg/JSEssential5.png" class=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.apply： 构建一个参数数组并让我们去调用函数，它允许我们选择this的值。可接收2个参数，第一个是绑定this的那个对象，第二个是参数。&lt;/p&gt;
&lt;p&gt;2.函数里的参数数组，即arguments数组。缺点：它不是一个真正的数组，虽然拥有length属性，但缺少数组方法。&lt;/p&gt;
&lt;p&gt;3.在函数前面加上new前缀来调用（即声明一个对象），且返回值不是一个对象，则返回this（该新对象）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://pyramidk.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
